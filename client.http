@host = localhost
@port = 3030
@uriBase = http://{{host}}:{{port}}
@uri = {{uriBase}}
@uriDb = {{uriBase}}/db
@uriSurrealDb = {{uriBase}}/surrealdb
@uriGql = {{uriBase}}/graphql
@contentType = application/json

@thing = person:kapa
@thingTobie = person:tobie
@thingRestaurant = restaurant:a6
@thingRecipe = recipe:a1
@namespaceAndDatabase = test

### ::::: BO app-rst :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

// local AppModule:AppController

### getHello
// @name getHello
GET {{uri}} HTTP/1.1
Content-Type: {{contentType}}

### appLib SurrealDbModule

### getConfig
// @name getConfig
// call surrealDbService.getConfig()

GET {{uri}}/config HTTP/1.1
Content-Type: {{contentType}}

{
}

### getHelloAppModule
// @name getHelloAppModule
// call surrealDbService.getHelloAppModule()

GET {{uri}}/appservice HTTP/1.1
Content-Type: {{contentType}}

{
}

### getUserFindOneByField
// @name getUserFindOneByField
// call surrealDbService.getUserFindOneByField() (moked user)

GET {{uri}}/userservice HTTP/1.1
Content-Type: {{contentType}}

{
}

// local AppModule:DbModule: DbController

### getUserFindOneByFieldInsideDbModule
// @name getUserFindOneByFieldInsideDbModule
// call surrealDbService.getUserFindOneByField() (moked user)

GET {{uriDb}}/userservice HTTP/1.1
Content-Type: {{contentType}}

{
}

### getSelectDbModule
// @name getSelectDbModule
// call surrealDbService.select(thing)

GET {{uriDb}}/select/{{thing}}
Content-Type: application/json

### ::::: EO app-rst :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

### ::::: BO app-rst and app-gql :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

###  surrealDbModule: surrealDb proxy methods

### postConnect
// @name postConnect

POST {{uriSurrealDb}}/connect
Content-Type: application/json

{
  "url": "ws://127.0.0.1:8000/rpc"
}

### postClose
// @name postClose

POST {{uriSurrealDb}}/close
Content-Type: application/json

{
}

### postPing
// @name postPing
// ping is used internally. It doesn't need to be called from any client code

POST {{uriSurrealDb}}/ping
Content-Type: application/json

{
}

### postUse
// @name postUse

POST {{uriSurrealDb}}/use
Content-Type: application/json

{
  // use SELECT * FROM $session to view current ns and db
  "namespace": "{{namespaceAndDatabase}}",
  "database": "{{namespaceAndDatabase}}"
}

### postInfo
// @name postInfo
// note: This method returns the record of an authenticated scope user.
// returns the same as $auth

POST {{uriSurrealDb}}/info
Content-Type: application/json

{
}

### postSignup
// @name postSignup

POST {{uriSurrealDb}}/signup
Content-Type: application/json

{
  "namespace": "{{namespaceAndDatabase}}",
  "database": "{{namespaceAndDatabase}}",
  // opt1: with Record Access : We want to signup to the 'allusers' scope defined above
  // "scope": "allusers",
  // opt2: Only supported from SurrealDB 2.x onwards
  // account match `DEFINE ACCESS account ON DATABASE...`
  "access": "account",
  // We can add any variable here to use in the SIGNUP clause
  "variables": {
    "username": "alex",
    "password": "password",
    "tags": ["rust", "golang", "javascript"],
    "settings": {
      "marketing": true
    }
  }
}

### postSignin
// @name postSignin
// https://surrealdb.com/docs/sdk/javascript/methods/signin#example-usage

POST {{uriSurrealDb}}/signin
Content-Type: application/json
// note: signIn user, check $auth and $session

{
  "namespace": "{{namespaceAndDatabase}}",
  "database": "{{namespaceAndDatabase}}",
  // opt1: with Record Access : We want to signup to the 'allusers' scope defined above
  // "scope": "allusers",
  // opt2: Only supported from SurrealDB 2.x onwards
  // account match `DEFINE ACCESS account ON DATABASE...`
  "access": "account",
  "variables": {
    "username": "mario",
    "password": "password"
    // this can be used, if used in signin function
    // "tags": ["rust", "golang", "javascript"],
    // "settings": {
    //   "marketing": true
    // }
  }  
}

### postInvalidate
// @name postInvalidate
// note: invalid current signIn user, will clean the $aut object

POST {{uriSurrealDb}}/invalidate
Content-Type: application/json

{
}

### postAuthenticate
// @name postAuthenticate
// note: very usefull to authenticate user from a authToken, ex after invalidate, 
// even work if we are signin with a user and want to switch to other user

POST {{uriSurrealDb}}/authenticate
Content-Type: application/json

{
  "token": "{{postSignin.response.body.*}}"
}

### postLet
// @name postLet
// note: Assigns a value as a parameter for this connection.
// test: `return $name;` will return `[ { "first": "Tobie", "last": "Morgan Hitchcock" } ]`

POST {{uriSurrealDb}}/let
Content-Type: application/json

{
  "variable": "name",
  "value": {
    "first": "Tobie",
    "last": "Morgan Hitchcock"
  }
}

### postUnset
// @name postUnset
// note: Removes a parameter for this connection.
// test: `return $name;` will return `[ null ]`

POST {{uriSurrealDb}}/unset
Content-Type: application/json

{
  "variable": "name"
}

### postLive
// @name postLive
// Initiates a live query.
// this will return uuid wrapped in double quotes

POST {{uriSurrealDb}}/live/person
Content-Type: application/json
// note: we have the optional callback in controller

{
}

### postSubscribeLive
// @name postSubscribeLive
// Registers a callback function for a running live query.
// don't use return uuid wrapped in double quotes
// @queryUuid = {{postLive.response.body.*}}

POST {{uriSurrealDb}}/subscribe-live/4c40e576-87f6-40cb-8285-d44f72fe23b7
Content-Type: application/json

{
}

### postUnsubscribeLive
// @name postUnsubscribeLive
// don't use return uuid wrapped in double quotes
// @queryUuid = {{postLive.response.body.*}}

POST {{uriSurrealDb}}/unsubscribe-live/2157e0ec-56af-4815-8a45-e4710e5fac3c
Content-Type: application/json

{
}

### postKill
// @name postKill
// don't use return uuid wrapped in double quotes
// @queryUuid = {{postLive.response.body.*}}

POST {{uriSurrealDb}}/kill/d4810e75-2d2b-4fc3-8a8e-49bfd1a89b2a
Content-Type: application/json

{
}

### postQuery
// @name postQuery

POST {{uriSurrealDb}}/query
Content-Type: application/json

{
  // recordId
  // don't need to use type::thing($id) when use recordId string  
  // "query": "select * from person where id = person:1jftpekc74qvd3roms9c",
  // required to use type::thing($id) when use $id var
  "query": "select * from person where id = type::thing($id)",
  // "query": "select string::concat(name.first, ' ', name.last) AS name, age FROM type::thing($id)",
  // table
  // "query": "select * from type::table($tb)",
  "bindings": {
    "id": "person:0betlakpbh5oojrcypnw"
    // "tb": "person"
  }
  // https://surrealdb.com/docs/surrealql/parameters#auth
  // "query": "SELECT * FROM $auth"
  // https://surrealdb.com/docs/surrealql/parameters#session
  // "query": "SELECT * FROM $session"
  // https://surrealdb.com/docs/surrealql/parameters#access
  // "query": "SELECT * FROM $access"
  // "query": "select * from user;"
  // test above let
  // "query": "return $name;"
}

### postQueryRaw
// @name postQueryRaw

POST {{uriSurrealDb}}/query-raw
Content-Type: application/json

{
  "query": "select * from person where id = type::thing($id)",
  "bindings": {
    "id": "person:0betlakpbh5oojrcypnw"
  }
}


### getSelect
// @name getSelect

GET {{uriSurrealDb}}/select/person:0betlakpbh5oojrcypnw
Content-Type: application/json
// Authorization: Bearer {{postSignin.response.body.*}}

### postCreate
// @name postCreate

POST {{uriSurrealDb}}/create/person
Content-Type: application/json
// Authorization: Bearer {{postSignin.response.body.*}}

{
  "title": "Founder & CEO",
  "name": {
    "first": "Jamie",
    "last": "Morgan Hitchcock"
  },
  "marketing": true,
  "age": 28,
  "html":"123"
}

### postInsert
// @name postInsert

POST {{uriSurrealDb}}/insert/person
Content-Type: application/json
// Inserts one or multiple records in the database.
// Authorization: Bearer {{postSignin.response.body.*}}

[
  // test with multiple records
  {
    "title": "Founder & CEO",
    "name": {
      "first": "Multiple 1",
      "last": "Morgan Hitchcock"
    },
    "marketing": true,
    "age": 28,
    "html":"123"
  },
  {
    "title": "Founder & CEO",
    "name": {
      "first": "Multiple 2",
      "last": "Morgan Hitchcock"
    },
    "marketing": true,
    "age": 28,
    "html":"123"
  }
]

### postInsertRelation
// @name postInsertRelation
// Inserts one or multiple relations in the database.

POST {{uriSurrealDb}}/insert-relation/person_relation_post
Content-Type: application/json

// test with one relation
// {
//   "in": "person:mario",
//   "out": "post:wu4o9efvd25nz9rpp5v3"
// }

[
  // test with multiple relations
	{
    "in": "person:mario",
    "out": "post:wu4o9efvd25nz9rpp5v3"
	},
	{
    "in": "person:alex",
    "out": "post:3jzehgkqyqvip86ryy5f"
	}
]

### putUpdate
// @name putUpdate
// replace current record with payload data

PUT {{uriSurrealDb}}/update/person:mario
Content-Type: application/json

{
  "name": {
    "first": "MÃ¡rio",
    "last": "Monteiro"
  },
  "age": 50,
  "country": "Portugal"
}

### patchUpsert
// @name patchUpsert
// upserts all records in a table, or a specific record, in the database.

PATCH {{uriSurrealDb}}/upsert/person:pedro
Content-Type: application/json

{
  "name": {
    "first": "Pedro",
    "last": "Monteiro"
  },
  "age": 50,
  "country": "Portugal"
}

### postMerge
// @name postMerge
// upserts all records in a table, or a specific record, in the database.

POST {{uriSurrealDb}}/merge/person:pedro
Content-Type: application/json

{
  "newProp": "fooBar",
  "temp": {
    "prop1": "value1",
    "prop2": "value2",
    "prop3": "value3"
  },
  "tags": []
}

### patchPatch
// @name patchPatch
// applies JSON Patch changes to all records, or a specific record, in the database.

PATCH {{uriSurrealDb}}/patch/person:pedro
Content-Type: application/json

[
	{ "op": "replace", "path": "/settings/active", "value": false },
	{ "op": "add", "path": "/tags", "value": ["developer", "engineer"] },
	{ "op": "remove", "path": "/temp" }
]

### deleteDelete
// @name deleteDelete
// Deletes all records in a table, or a specific record, from the database.

// delete whole table
// DELETE {{uriSurrealDb}}/delete/person
DELETE {{uriSurrealDb}}/delete/person:pedro
Content-Type: application/json

{
}

### getVersion
// @name getVersion
// Obtain the version of the SurrealDB instance

GET {{uriSurrealDb}}/version
Content-Type: application/json

{
}

### postRun
// @name postRun
// Run a SurrealQL function

POST {{uriSurrealDb}}/run/fn::greet
Content-Type: application/json

[
  "Tobie"
]

### postRelate
// @name postRelate

POST {{uriSurrealDb}}/relate/person_relate_post
Content-Type: application/json

{
  "from": "person:mario",
  "to": "post:3jzehgkqyqvip86ryy5f",
  "data": {
    // this will be store all data in a data property, and is optional, only use here as a example to not add data props to root of record
    "data": {
      "newProp": "fooBar",
      "temp": {
        "prop1": "value1",
        "prop2": "value2",
        "prop3": "value3"
      },
      "tags": [ "rust", "ts" ]
    }
  }
}

// BOF: future implementation
// {
//   "from": [
//     "person:mario",
//     "person:alex"
//   ],
//   "to": [
//     "post:3jzehgkqyqvip86ryy5f",
//     "post:wu4o9efvd25nz9rpp5v3"
//   ],
//   "data": {
//     "newProp": "fooBar",
//     "temp": {
//       "prop1": "value1",
//       "prop2": "value2",
//       "prop3": "value3"
//     },
//     "tags": [ "rust", "ts" ]
//   }
// }
// EOF: future implementation

### postRpc
// @name postRpc

// POST {{uriSurrealDb}}/rpc/version
POST {{uriSurrealDb}}/rpc/query
// POST {{uriSurrealDb}}/rpc/run
Content-Type: application/json

// version
// [ ]
// query
[
  "CREATE person SET name = 'John'; SELECT * FROM type::table($tb);",
  {
    "tb": "person"
  }
]
// run  
// [ "time::now" ]

### postExport
// @name postExport

POST {{uriSurrealDb}}/export
Content-Type: application/json

{  
  "users": true,
  "accesses": true,
  "params": true,
  "functions": true,
  "analyzers": true,
  // WIP: if we use true in versions, it starts acts like false in some cases, uncomment it to check the issue
  // "versions": true,
  // NOTE: tables can be boolean or string[]
  "tables": true,
  // "tables": [ "person", "post" ],
  "records": true
}

### ::::: EO app-rst and app-gql :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

### ::::: BO app-gql :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

@requestType = GraphQL
@random = {{$randomInt 1000 9999}}

## restaurants

### mutation: createRestaurant
// @name createRestaurant
POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

mutation createRestaurant($createRestaurantInput: CreateRestaurantInput!) {
	createRestaurant(createRestaurantInput: $createRestaurantInput) {
    id
    uuid
    name
    description
    email
    recipes {
      id
      title
      description
      ingredients
      createdAt
      updatedAt
    }
    createdAt
    updatedAt
	}
}

{
	"createRestaurantInput": {
    "id": "{{thingRestaurant}}",
    "uuid": "{{$guid}}",
    "name": "Restaurant #{{random}}",
    "description": "some description #{{random}}",
    "email": "fake@email.com"
    // TODO: use surrealId here, and check if exists
    // "recipes": ["bananas", "apples", "lemons", "pears"]
  }
}

### mutation: updateRestaurant
// @name updateRestaurant

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

mutation updateRestaurant($id: String!, $updateRestaurantInput: UpdateRestaurantInput!) {
	updateRestaurant(id: $id, updateRestaurantInput: $updateRestaurantInput) {
    id
    uuid
    name
    description
    recipes {
      id
      title
      description
      ingredients
      createdAt
      updatedAt
    }
    createdAt
    updatedAt
	}
}

{
  "id": "{{thingRestaurant}}",
	"updateRestaurantInput": {
    "name": "Restaurant #{{random}}-MOD",
    "description": "some description #{{random}}-MOD"
    // TODO:
    // "ingredients": ["bananas", "apples", "lemons", "pears", "mod"]
  }
}

### query: findOneRestaurant
// @name findOneRestaurant

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

query findOneRestaurant($id: String!){
  findOneRestaurant(id: $id ){
    id
    uuid
    name
    description
    recipes {
      id
      title
      description
      ingredients
      createdAt
      updatedAt
    }
    createdAt
    updatedAt
  }
}

{
	"id": "{{thingRestaurant}}"
}

### query: findManyRestaurants
// @name findManyRestaurants

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

query findManyRestaurants($skip: Int, $take: Int) {
  findManyRestaurants(skip: $skip, take: $take) {
    id
    uuid
    name
    description
    recipes {
      id
      title
      description
      ingredients
      createdAt
      updatedAt
      # this test dataLoader working using same recipes from restaurants
      # if we opt to not use it in `async recipes(` we can comprove that we have a lot more queries against surrealdb
      restaurant {
        id
        recipes {
          id
        }
      }
    }
    createdAt
    updatedAt
  }
}

{
	"skip": 0,
  "take": 10
}

### mutation: removeRestaurant
// @name removeRestaurant

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

mutation removeRestaurant($id: String!){
  removeRestaurant(id: $id )
}

{
  "id": "{{thingRestaurant}}"
}

### subscription: restaurantAdded
// @name restaurantAdded

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

subscription restaurantAdded{
  restaurantAdded{
    id
    name
  }
}

### subscription: restaurantUpdated
// @name restaurantUpdated

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

subscription restaurantUpdated{
  restaurantUpdated{
    id
    name
  }
}

### subscription: restaurantDeleted
// @name restaurantDeleted

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

subscription restaurantDeleted{
  restaurantDeleted
}

### recipes

### mutation: createRecipe
// @name createRecipe
POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

mutation createRecipe($createRecipeInput: CreateRecipeInput!) {
	createRecipe(createRecipeInput: $createRecipeInput) {
    id
    uuid
    title
    description
    ingredients
    restaurant{
      id
      name
      recipes {
        id
        title
        description
        ingredients
        createdAt
        updatedAt
      }
    }
    createdAt
    updatedAt
	}
}

{
	"createRecipeInput": {
    "id": "{{thingRecipe}}",
    "restaurant": "{{thingRestaurant}}",
    "uuid": "{{$guid}}",
    "title": "Recipe #{{random}}",
    "description": "some description #{{random}}",
    "ingredients": ["bananas", "apples", "lemons", "pears"]
  }
}

### mutation: updateRecipe
// @name updateRecipe

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

mutation updateRecipe($id: String!, $updateRecipeInput: UpdateRecipeInput!) {
	updateRecipe(id: $id, updateRecipeInput: $updateRecipeInput) {
    id
    uuid
    title
    description
    ingredients
    createdAt
    updatedAt
	}
}

{
  "id": "{{thingRecipe}}",
	"updateRecipeInput": {
    "title": "Recipe #{{random}}-MOD",
    "description": "some description #{{random}}-MOD",
    "ingredients": ["bananas", "apples", "lemons", "pears", "mod"]
  }
}

### query: findOneRecipe
// @name findOneRecipe

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

query findOneRecipe($id: String!){
  findOneRecipe(id: $id ){
    id
    uuid
    title
    description
    ingredients
    restaurant {
      id
      name
    }
    createdAt
    updatedAt
  }
}

{
	"id": "{{thingRecipe}}"
}

### query: findManyRecipes
// @name findManyRecipes

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

query findManyRecipes($skip: Int, $take: Int) {
  findManyRecipes(skip: $skip, take: $take) {
    id
    uuid
    title
    description
    ingredients
    restaurant {
      id
      name
    }
    createdAt
    updatedAt
  }
}

{
	"skip": 0,
  "take": 10
}

### mutation: removeRecipe
// @name removeRecipe

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

mutation removeRecipe($id: String!){
  removeRecipe(id: $id )
}

{
  "id": "{{thingRecipe}}"
}

### subscription: recipeAdded
// @name recipeAdded

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

subscription recipeAdded{
  recipeAdded{
    id
    name
  }
}

### subscription: recipeUpdated
// @name recipeUpdated

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

subscription recipeUpdated{
  recipeUpdated{
    id
    name
  }
}

### subscription: recipeDeleted
// @name recipeDeleted

POST {{uriGql}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{postSignin.response.body.*}}

subscription recipeDeleted{
  recipeDeleted
}

### ::::: EO app-gql :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
